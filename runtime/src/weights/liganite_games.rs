
//! Autogenerated weights for `liganite_games`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.0.0
//! DATE: 2025-03-08, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `kalan-x1x`, CPU: `12th Gen Intel(R) Core(TM) i7-12800H`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// ./target/production/wbuild/liganite-runtime/liganite_runtime.compact.compressed.wasm
// --pallet
// liganite_games
// --extrinsic
// *
// --output
// ./runtime/src/weights/liganite_games.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `liganite_games`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> liganite_games::WeightInfo for WeightInfo<T> {
	/// Storage: `Publish::Publishers` (r:1 w:0)
	/// Proof: `Publish::Publishers` (`max_values`: None, `max_size`: Some(300), added: 2775, mode: `MaxEncodedLen`)
	/// Storage: `Games::PublishedGames` (r:1 w:1)
	/// Proof: `Games::PublishedGames` (`max_values`: None, `max_size`: Some(245), added: 2720, mode: `MaxEncodedLen`)
	/// Storage: `Games::Tags` (r:20 w:0)
	/// Proof: `Games::Tags` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[1, 128]`.
	/// The range of component `b` is `[0, 20]`.
	fn game_add(a: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `437 + b * (249 ±0)`
		//  Estimated: `3765 + b * (2544 ±0)`
		// Minimum execution time: 12_146_000 picoseconds.
		Weight::from_parts(14_749_200, 0)
			.saturating_add(Weight::from_parts(0, 3765))
			// Standard Error: 3_132
			.saturating_add(Weight::from_parts(35_472, 0).saturating_mul(a.into()))
			// Standard Error: 19_430
			.saturating_add(Weight::from_parts(4_371_925, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 2544).saturating_mul(b.into()))
	}
	/// Storage: `Games::PublishedGames` (r:1 w:0)
	/// Proof: `Games::PublishedGames` (`max_values`: None, `max_size`: Some(245), added: 2720, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	/// Storage: `Games::PublisherOrders` (r:0 w:1)
	/// Proof: `Games::PublisherOrders` (`max_values`: None, `max_size`: Some(90), added: 2565, mode: `MaxEncodedLen`)
	/// Storage: `Games::BuyerOrders` (r:0 w:1)
	/// Proof: `Games::BuyerOrders` (`max_values`: None, `max_size`: Some(106), added: 2581, mode: `MaxEncodedLen`)
	fn order_place() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `335`
		//  Estimated: `3710`
		// Minimum execution time: 40_591_000 picoseconds.
		Weight::from_parts(41_537_000, 0)
			.saturating_add(Weight::from_parts(0, 3710))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
